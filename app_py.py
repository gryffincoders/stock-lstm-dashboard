# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z3vaB2P0wtgNXP-30Lbz5naamEdWymdp
"""

!pip install alpha_vantage scikit-learn matplotlib seaborn tensorflow

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import classification_report, precision_score, recall_score, f1_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from alpha_vantage.timeseries import TimeSeries
from datetime import datetime, timedelta

api_key = 'UJ3YLSB5O8OS5SU7'
ts = TimeSeries(key=api_key, output_format='pandas')
data, meta_data = ts.get_daily(symbol='AAPL', outputsize='full')


df = data.rename(columns={
    '1. open': 'Open',
    '2. high': 'High',
    '3. low': 'Low',
    '4. close': 'Close',
    '5. volume': 'Volume'
})
df = df.sort_index()
df = df[['Open', 'High', 'Low', 'Close', 'Volume']]
df.head()

df['MA10'] = df['Close'].rolling(window=10).mean()
df['MA50'] = df['Close'].rolling(window=50).mean()
df.dropna(inplace=True)

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['Close']])

sequence_length = 60
X, y = [], []
for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])
X, y = np.array(X), np.array(y)
X = X.reshape(X.shape[0], X.shape[1], 1)

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(50))
model.add(Dropout(0.2))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=20, batch_size=32)

predicted_prices = model.predict(X)
predicted_prices = scaler.inverse_transform(predicted_prices.reshape(-1, 1))
true_prices = scaler.inverse_transform(y.reshape(-1, 1))

# Binarize for classification metrics (price up/down)
y_true = (np.diff(true_prices.flatten(), prepend=true_prices[0]) > 0).astype(int)
y_pred = (np.diff(predicted_prices.flatten(), prepend=predicted_prices[0]) > 0).astype(int)

print("Precision:", precision_score(y_true, y_pred))
print("Recall:", recall_score(y_true, y_pred))
print("F1 Score:", f1_score(y_true, y_pred))
print("\nClassification Report:\n", classification_report(y_true, y_pred))

last_60_days = scaled_data[-60:]
future_input = last_60_days.reshape(1, 60, 1)
future_price_scaled = model.predict(future_input)
future_price = scaler.inverse_transform(future_price_scaled)
print("Predicted Price for Next Day:", future_price.flatten()[0])

plt.figure(figsize=(10,6))
plt.plot(true_prices, label='Actual Price')
plt.plot(predicted_prices, label='Predicted Price')
plt.legend()
plt.title('Stock Price Prediction')
plt.xlabel('Days')
plt.ylabel('Price')
plt.show()